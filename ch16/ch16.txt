chapter 16
==========

### Linked Lists

*Final exam covers ch 13-17.*

**All of the collections in this course us one of the following two underlying data structures:**

  - Array
    - *ArrayList, Stack, HashSet, HashMap*
  - Linked Objects
    - *LinkedList, TreeSet, TreeMap*

**Linked Objects** store an element and one or more references to other elements:

**Head**->`element|next`->`element|next`->`element|next`->**Tail** *(End ref points null)*.

A linked list is a data structure that stores an ordered sequence of elements using a chain of objects called **nodes**. Each 
node refers to at least one other node in the list. A node has a *data* and *next* field. You can connect one node to another by assigning
its *next* field to another node. 

#### List Node

ListNode is a class for storing a single node of a linked list, as a list is composed of nodes [data, next].

```java 
public class ListNode {
	int data;
	ListNode next; // class defined recursively 
}
```

In this example each list node object stores one piece of integer data and a reference to another list node. 
**ListNodes** are linked together into chains to store lists of values. A ListNode class w/ practical constructors would look like:

```java 
public class ListNode {
	int data;
	ListNode next;
	// default constructor in use

	// supplied constructors
	public ListNode(){
		this(0, null);
	}
	public ListNode(int data){
		this(data, null);
	}
	public ListNode(int data, ListNode next){
		this.data = data;
		this.next = next;
	}
}
```

With which a declaration of a new Linked List such as:

```java

ListNode list = new ListNode(42, new ListNode(43, new ListNode(44)));

```

is entirely valid and creates a list of `42, 43, 44` with appropriate links, final node terminating `null`. It can be seen
that the list itself is a data structure abstracted from the individual nodes, defined recursively. 

#### List Traversal

Traversing a linked list is accomplished through the use of node pointers, or otherwise *ListNode variables*. References to 
`head`, `curr`, and `tail` are very useful in manipulating lists and can be created by assignment:

```java

ListNode curr = list;

```

The list can then be traversed by walking the reference until next points to `null`;

```java

while(curr!=null){
	System.out.println(curr.data);
	curr = curr.next;
}

```

In the implementation of the LinkedList class, a `null head` would signify an empty list, or otherwise `head==tail`.
Sorting, insertion, removal, et al operations must check for null condition to avoid null pointer exceptions.
Adding to a list requires traversal of the list to the end:


```java
	public void add(int value){
		if(head==null)
			head = new ListNode(value);
		else {
			ListNode curr = head;
			// traverse to end
			while(curr.next!=null){
				curr = curr.next;
			}
			// add node at end 
			curr.next = new ListNode(value);
		}	
	}
```

Returning the head and tail of the list itself requires similar checks and traversals:

```java

	public ListNode head(){
		return head;
	}
	public ListNode tail(){
		if(head==null)
			return head;
		else {
			ListNode curr = head;
			// traverse to end
			while(curr.next!=null){
				curr = curr.next;
			}
		return curr;
		}
	}
```

**Getting** a value at a specified index is an operation similar to indexing queues, in which the structure is indexed by way of (n) iterations. 
In the context of the Linked List, we traverse pointer assignments every iteration:

```java
	public int get(int index){
		ListNode curr = head;
		// we can index by way of iterating next ptr assignments
		for(int i=0; i<index; i++)
			curr = curr.next;
		return curr.data;
	}
``` 

**Removing** a value from the front of the list (or at any other index) involves updating links:

```java

	// removes and returns head
	public int remove(){
		if(head==null)
			throw new NoSuchElementException();
		else {
			// grab value
			int res = head.data;
			// update links
			head = head.next;
			return res;
		}
	}

	// remove at specified index without returning
	public void remove(int index){
		if(index==0)
			// just update first link
			head=head.next;
		else {
			// traverse list to index
			// point prev node to next node
			// [prev] -> [skip me] -> [next]
			ListNode curr = head;
			for(int i=0; i<index-1; i++)
				curr = curr.next;
			curr.next = curr.next.next;
		}
	}
```

#### Sorted Lists

The precondition of the `addSorted()` method is a sorted list - an empty list may be considered sorted and this natural
order may be preserved so long as the `addSorted()` method is used. We iterate until a comparison is satisfied before updating 
links with a new ListNode:

```java
public void addSorted(int value){
	if(head==null||value<head.data)
		head = new ListNode(value, head);
	else {
		ListNode curr=head;
		while(curr.next!=null && curr.next.data < value){
			curr = curr.next;
		}
		// insert a new node ahead of current position with next assigned to current next
		curr.next = new ListNode(value, curr.next);
	}
}
```


#### Implementing an Interface

A class can declare that it *implements* a given interface. Linked Lists v ArrayLists share a number of similar methods,
 with different implementations. Due to this similar behavior we can consider them to share an *interface*, in our case an
interface *IntList*:

```java
public interface IntList{
	public void add(int value);
	public void add(int index, int value);
	public int get(int index);
	public voide remove(int index);
	public String to String();
}

//...

public class ArrayIntList implements IntList {...}
public class LinkedIntList implements IntList {...}

```

Allowing us to utilize an interface instead of referring to individual class methods:

```java

public static void main(String[] args){
	IntList list1 = new ArrayIntList();
	IntList list2 = new LinkedIntList();
	process(list1);
	process(list2);
}
public static void process(IntList list){
	// list.add() list.remove, etc.
}
```

However, the implementation of `ArrayIntList.add()` and `LinkedIntList().add()` may be entirely different. *The shared interface
 only promises that they will both implement `add()`.*  